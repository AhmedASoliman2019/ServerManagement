@inject NavigationManager NavMan

<Virtualize Items="this.AllServers" Context="s">
    <div @key="s.Id" class="row border-bottom">
        <div class="col"><p>Server @s.Name located in @s.City is currently</p></div>
        <div class="col"> <p style="font-weight: bolder; color: @(s.IsOnline ? "green" : "red")">@(s.IsOnline ? "Online" : "Offline")</p></div>
        <div class="col"><a href="/EditServer/@s.Id">Edit Server</a></div>
        <div class="col"><button class="link-primary" type="button" @onclick="@(() => DeleteServer(s.Id))">Delete</button></div>
    </div>
</Virtualize>

@code {
        [Parameter]
        public int ServerId { get; set; }
        [Parameter]
        public string CityName { get; set; }

    private string CurrentCity { get; set; }
    private string _SearchServer = "";
    public string SearchServer
    {
        get => _SearchServer;
        set
        {
            _SearchServer = value;
            AllServers = ServersRepository.SearchServers(_SearchServer);

        }
    }
    private string styletag = "";
    private List<Server> CityServers = ServersRepository.GetServersByCity("Toronto");
    private List<Server> AllServers = ServersRepository.GetServres();
    private List<string> cities = CitiesRepository.GetCities();
    void DeleteServer(int ServerId)
    {
        ServersRepository.DeleteServer(ServerId);
        NavMan.NavigateTo("/servers");
    }
    protected override void OnParametersSet()
    {
        if (CityName != null) { UpdateCity(CityName); }
    }
    void UpdateCity(string city)
    {
        CurrentCity = city;
        styletag = "border: double";
        AllServers = ServersRepository.GetServersByCity(CurrentCity);
        if (city == "Halifax")
        {
            for (int i = 16; i <= 2000; i++)
            {
                AllServers.Add(new Server { Id = i, City = "Halifax", Name = $"Server {i}" });
            }
        }
    }
}